name: Run Tests

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'CODEOWNERS'
      - 'LICENSE'
  pull_request:
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'CODEOWNERS'
      - 'LICENSE'

jobs:
  Checkstyle:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/gradle-setup

      - name: Run Checkstyle
        run: ./gradlew checkstyleMain checkstyleTest checkstyleTestFixtures

  OpenAPI-Definitions:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/gradle-setup

      - name: Generate OpenAPI definition from code
        run: ./gradlew resolve

      - name: Check OpenAPI definition match code
        run: git diff --exit-code

  Test:
    permissions:
      checks: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/gradle-setup

      - name: 'Build package'
        run: ./gradlew -DuseFsVault="true" build

      - name: 'Install docker compose plugin'
        run: |
          DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
          mkdir -p $DOCKER_CONFIG/cli-plugins
          curl -SL https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
          chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose

      - name: 'Run application in docker compose'
        run: docker compose -f system-tests/docker-compose.yml up --build --wait
        timeout-minutes: 10

      - name: 'Unit and system tests'
        uses: ./.github/actions/run-tests
        with:
          command: ./gradlew test
        timeout-minutes: 10
        env:
          INTEGRATION_TEST: true
          JACOCO: "true"

      - name: 'docker-compose logs'
        run: docker compose -f system-tests/docker-compose.yml logs
        if: always()


  Component-Tests:
    runs-on: ubuntu-latest
    env:
      JACOCO: true

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/gradle-setup

      - name: Component Tests
        uses: ./.github/actions/run-tests
        with:
          command: ./gradlew test -DincludeTags="ComponentTest"

  Upload-Coverage-Report-To-Codecov:
    needs:
      - Test
      - Component-Tests
    runs-on: ubuntu-latest
    if: always()
    steps:
      # Sources are needed for Codecov report
      - uses: actions/checkout@v4
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: CodeCov
        uses: codecov/codecov-action@v3
